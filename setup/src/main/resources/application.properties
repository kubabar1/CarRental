server.port=8080

spring.datasource.url=jdbc:h2:mem:car-rental;MODE=LEGACY
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.defer-datasource-initialization=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.sql.init.mode=always
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false
spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type=trace
spring.jpa.properties.hibernate.type=trace
spring.output.ansi.enabled=ALWAYS
application.title=Car rental
application.version=HEAD-SNAPSHOT
jwt.secret=secret123456
jwt.expirationInSeconds=1800
jwt.cookieName=token
cors.allowedOrigins=http://localhost:3030
cors.allowedMethods=HEAD, GET, POST, PUT, DELETE, PATCH
cors.allowedHeaders=Authorization, Cache-Control, Content-Type, credentials, X-XSRF-TOKEN
cors.allowCredentials=true

spring.rabbitmq.host=${RABBIT_HOST:localhost}
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.port=5672

mail.demoRecipientAddress=greenmail@localhost
mail.demoRecipientLogin=greenmail
mail.demoRecipientPassword=qwerty4321
mail.host=localhost
mail.port=3025
mail.username=greenmail
mail.password=qwerty4321

car-rental.user-service.login-page-url=http://localhost:3030/login
car-rental.user-service.registration-confirm-mail-url=http://localhost:3030/registration/confirm-mail
car-rental.user-service.registration-confirm-url=http://localhost:8080/registration/registration-confirm?token=
car-rental.user-service.registration-invalid-token-url=http://localhost:3030/registration/invalid-token
car-rental.user-service.registration-expired-token-url=http://localhost:3030/registration/expired-token?token=
car-rental.user-service.reset-password-change-password-url=http://localhost:8080/reset-password/change-password?token=
car-rental.user-service.reset-password-invalid-token-url=http://localhost:3030/reset-password/invalid-token
car-rental.user-service.reset-password-update-token-url=http://localhost:3030/reset-password/update?token=

eureka.client.enabled=${EUREKA_ENABLED:false}

spring.rabbitmq.listener.simple.default-requeue-rejected=false
spring.rabbitmq.listener.simple.retry.enabled=false
#spring.rabbitmq.listener.simple.retry.enabled=true
#spring.rabbitmq.listener.simple.retry.initial-interval=5s
#spring.rabbitmq.listener.simple.retry.max-attempts=3
#spring.rabbitmq.listener.simple.retry.max-interval=10s
#spring.rabbitmq.listener.simple.retry.multiplier=2

car-rental.rabbitmq.exchange=x.car-rental
car-rental.rabbitmq.dlxExchange=x.car-rental.dlx

car-rental.rabbitmq.dlqDefaultQueue=q.car-rental.dlq

car-rental.vehicle-service.queue.getVehicleById=q.car-rental.vehicle-service.get-vehicle-by-id
car-rental.vehicle-service.getBookedVehiclesIdsQueue=${car-rental.booking-service.queue.getBookedVehiclesIdsQueue}
car-rental.vehicle-service.getLocationByIdQueue=${car-rental.booking-service.queue.getLocationByIdQueue}
car-rental.vehicle-service.getLocationQueue=${car-rental.booking-service.queue.getLocationQueue}
car-rental.vehicle-service.getAverageVehiclesRatingQueue=${car-rental.rating-service.queue.getAverageVehiclesRatingQueue}
car-rental.vehicle-service.uploadVehicleImageQueue=${car-rental.storage-service-stub.queue.getUploadVehicleImageQueue}

car-rental.booking-service.queue.getBookedVehiclesIdsQueue=q.car-rental.booking-service.get-booked-vehicles-ids-queue
car-rental.booking-service.queue.getLocationByIdQueue=q.car-rental.booking-service.get-location-by-id-queue
car-rental.booking-service.queue.getLocationQueue=q.car-rental.booking-service.get-location-queue
car-rental.booking-service.getVehicleByIdQueue=${car-rental.vehicle-service.queue.getVehicleById}

car-rental.rating-service.queue.getAverageVehiclesRatingQueue=q.car-rental.rating-service.get-average-vehicles-rating-queue

car-rental.user-service.queue.getUserByEmailQueue=q.car-rental.user-service.get-user-by-email-queue
car-rental.user-service.generateTokenQueue=${car-rental.auth-service.queue.generateTokenQueue}
car-rental.user-service.getTokenQueue=${car-rental.auth-service.queue.getTokenQueue}
car-rental.user-service.deleteTokenQueue=${car-rental.auth-service.queue.deleteTokenQueue}
car-rental.user-service.sendEmailQueue=${car-rental.mail-service.queue.sendEmailQueue}
car-rental.user-service.sendMultipleEmailsQueue=${car-rental.mail-service.queue.sendMultipleEmailsQueue}

car-rental.auth-service.queue.generateTokenQueue=q.car-rental.auth-service.generate-token-queue
car-rental.auth-service.queue.getTokenQueue=q.car-rental.auth-service.get-token-queue
car-rental.auth-service.queue.deleteTokenQueue=q.car-rental.auth-service.delete-token-queue
car-rental.auth-service.getUserByEmailQueue=${car-rental.user-service.queue.getUserByEmailQueue}

car-rental.mail-service.queue.sendEmailQueue=q.car-rental.mail-service.send-email-queue
car-rental.mail-service.queue.sendMultipleEmailsQueue=q.car-rental.mail-service.send-multiple-emails-queue

car-rental.storage-service-stub.queue.getUploadVehicleImageQueue=q.car-rental.storage-service-stub.upload-vehicle-image-queue

car-rental.booking-service.booking-scheduler.cancelExpiredBookingEnabled=true
car-rental.booking-service.booking-scheduler.cancelExpiredBookingCron=0 0 0 * * *